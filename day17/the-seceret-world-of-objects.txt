OBJECT ORIENTED PROGRAMING

A set of techniques that use object (and related concept ) as the centeral principle of programm organization.

ENCAPSULATION


the core idea in object-oriented programming is to divide programs into smaller peices and make each peice responsible for managing its own state.

This way, some knowledge about the way a piece of the program works can
be kept local to that piece.

Different pieces of such a program interact with each other through interfaces, limited sets of functions or bindings that provide useful functionality at a more abstract level, hiding their precise implementation.


Properties that are part of the interface
are called public.

The others, which outside code should not be touching, are
called private.

JavaScript,
once again taking the minimalist approach, does not—not yet at least.

It is also common to put anunderscore (_) character at the start of property names to indicate that those properties are private.

Separating interface from implementation is a great idea. It is usually called ENCAPSULATION.

When a function is called as a method—looked up as a property and immediately
called, as in object.method()—the binding called this in its body automatically
points at the object that it was called on.


CALL method
its is a method on function .
it takes "this" value as its first arguments and treats further as normal parameters.


each funtion has its own "this" biniding,whose value depends on the way it is called.

you cannot refer to the this of the wrapping scope in a regular
function defined with the function keyword.

Arrow functions are different—they do not bind their own this but can see
the this binding of the scope around them.


PROTOTYPE


In addition to thier set of properties , most object also have a prototype.

A prototype is another set of object that is used as a fallback source of properties.

When an object gets a request for a property that it does
not have, its prototype will be searched for the property, then the prototype’s
prototype, and so on.

prototype of empty object is the great ancestral prototype , the entity behind almost all object ,"Object.prototype".

Object.getPrototypeOF returns the prototype of an object.


The prototype relations of JavaScript objects form a tree-shaped structure,
and at the root of this structure sits Object.prototype.


Many objects don’t directly have Object.prototype as their prototype but
instead have another object that provides a different set of default properties.
Functions derive from Function.prototype, and arrays derive from Array
.prototype.

A property like speak(line) in an object expression is a shorthand way of
defining a method. It creates a property called speak and gives it a function
as its value

prototype acts as a continer for the properties that are shared by all rabbits. AN individual rabbit object , like the killer rabbit contains the properties that apply only to iself -  in this case its type - and derives shared properties form its prototype like -- its method



CLASS

JavaScript's prototype system can be interpretd as a somewhat informal take on an object-oriented porgramming concept called classes. 

a class defines a shape a type of a object - what properties and methods it has . Such an object is called an instance of a the class.


Prototypes are useful for defining properties for which all instances of a class
share the same value, such as methods.

properties which differs per instance has to be stored in that object itself.

so to create an object of a given calss you have to make sure an object taht derives from th eproper prototype , but you also have to make sure it, itself, has
the properties that instances of this class are supposed to have. This is what a constructor function does.

the keyword new in front of a function call, the function is treated as
a constructor. This means that an object with the right prototype is automatically
created, bound to this in the function, and returned at the end of the
function.

Constructors (all functions, in fact) automatically get a property named
prototype which by default holds a plain, empty object that derives from
Object.prototype.


CLASS NOTATION
So JavaScript classes are constructor functions with a prototype property

class keyword starts a class declaration  which allows us to define a constructor and a set of method all in a single place.

declaration name "constructor" is treated specially. 
it provide the actual constructor fucntion , ehich will be bound to the name Rabbit.  The other are packages into that constructot prototype.

class can be used both in a statement and a expression.

OVERRIDING DERIVED Properties

When you add a property to an object, whether it is present in the prototype or not, the property is added to the object itself

MAPS

A map (noun) is a data structure that associates values (the keys) with other
values.

If you need a map whose keys can’t
easily be converted to strings—such as objects—you cannot use an object as
your map.


The methods "set", "get", and "has" are part of the interface of the Map object

If you do have a plain object that you need to treat as a map for some reason,
it is useful to know that Object.keys returns only an object’s own keys, not
those in the prototype



SYMBOLS

Symbols are values
created with the Symbol function.

Unlike strings, newly created symbols are
unique—you cannot create the same symbol twice.

